import StringTools;

import haxe.ui.RuntimeComponentBuilder;
import flixel.FlxG;
import flixel.text.FlxTextBorderStyle;
import haxe.ui.backend.flixel.UIState;
import flixel.util.FlxSave;
import flixel.FlxSprite;
import haxe.Json;
import funkin.graphics.FunkinSprite;

import haxe.ui.core.Component;
import haxe.ui.core.TextDisplay;

import haxe.ui.components.Link;
import haxe.ui.components.Label;
import haxe.ui.components.Image;
import haxe.ui.components.Button;
import haxe.ui.components.TabBar;
import haxe.ui.components.Column;
import haxe.ui.components.TextArea;
import haxe.ui.components.CheckBox;
import haxe.ui.components.TextField;
import haxe.ui.components.NumberStepper;

import haxe.ui.containers.Box;
import haxe.ui.containers.HBox;
import haxe.ui.containers.Header;
import haxe.ui.containers.TabView;
import haxe.ui.containers.ListView;
import haxe.ui.containers.TableView;
import haxe.ui.containers.menus.Menu;
import haxe.ui.containers.menus.MenuBar;
import haxe.ui.containers.dialogs.Dialog;
import haxe.ui.containers.windows.Window;
import haxe.ui.containers.menus.MenuItem;
import haxe.ui.containers.menus.MenuCheckBox;
import haxe.ui.containers.menus.MenuOptionBox;
import haxe.ui.containers.menus.MenuSeparator;
import haxe.ui.containers.windows.WindowManager;
import flixel.text.FlxText;

import funkin.ui.MusicBeatState;

import haxe.ui.data.ArrayDataSource;

import haxe.ui.macros.ComponentMacros;

import openfl.net.URLLoader;
import openfl.net.URLRequest;
import openfl.net.FileReference;
import openfl.display.BitmapData;
import funkin.util.FileUtil;
import funkin.util.ReflectUtil;
import haxe.io.Bytes;
import Std;

import funkin.ui.debug.charting.ChartEditorState;

import funkin.input.Cursor;

import funkin.modding.module.ModuleHandler;

import funkin.modding.PolymodHandler;

import funkin.modding.module.Module;

import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.audio.FunkinSound;

//import haxe.Http;

class ModManagerState extends MusicBeatState {

    var loader = new URLLoader(); // May be able to get download progress?

    var roundCornerShader;

    var currentFolder = "???";

    // UI Stuff \\
    var loadingCircle;

    // -------- \\

    var save = new FlxSave();

    var curPage = 1;
    var curType = "Mod";
    var curOrder = "default"; // newest 

    var verifiedIDs;

    function new() {
        super('ModManagerState');
    }

	function openSound() {
		FunkinSound.playOnce(Paths.sound("chartingSounds/openWindow"), 1);
	}

    public function parseJsonString(str:String) {
		return Json.parse(str);
	}

	public function parseJsonFile(path:String) {
		var daString = FileUtil.readStringFromPath(path);
		if (daString == null || daString == "") {
			return null;
		} else {
			return parseJsonString(daString);
		}
	}

    function getBestOfTitle(category) {
        switch (category) {
            case "today":
                return "Best of Today";
        }
    }

    function loadImageFromWeb(url) {
        /* var loader = new URLLoader();
        loader.dataFormat = 0;
        loader.addEventListener("complete", ()->{
            var bitmap:BitmapData = BitmapData.fromBytes(loader.data);
            var sprite:FunkinSprite = new FunkinSprite().loadBitmapData(bitmap);
            sprite.setGraphicSize(FlxG.width/gridWidth, FlxG.height/gridWidth);
            if (globalIndex % gridWidth == 0) {
                yIndex++;
            }
            sprite.x = ((FlxG.width/gridWidth)*globalIndex) - (FlxG.width*yIndex);
            sprite.y = (FlxG.height/gridWidth) * yIndex + (15 * yIndex);
            sprite.updateHitbox();
            //loadedSprites.push(sprite);
            add(sprite);

            var title = new FlxText();
            title.text = titles[globalIndex];
            title.x = sprite.x;
            title.y = sprite.y + sprite.height;
            add(title);
            globalIndex++;
            //trace(loader.data);
            //FileUtil.writeBytesToPath(".temp/test.png", loader.data);
        });
        //var reference = new FileReference();
        //var url = "https://github.com/NebulaStellaNova/Nova-Mod-Manager/blob/main/whittyFront.png?raw=true";
        loader.load(new URLRequest(url)); */
    }

    function loadMods() {
        var url = "https://gamebanana.com/apiv11/Game/8694/Subfeed?_nPage=" + curPage + "&_csvModelInclusions=" + curType + "&_sOrder=" + curOrder + "";
        var loader = new URLLoader();
        loader.addEventListener("complete", ()->{
            var jsonFile = Json.parse(loader.data);
            for (i in jsonFile._aRecords) {
                /*var mod = {
                    //:
                }*/
                var ind = 0;
                for (image in i._aPreviewMedia._aImages) {
                    if (ind == 0) {
                        image._sBaseUrl = StringTools.replace(image._sBaseUrl, "\\", "");
                        loadImageFromWeb(image._sBaseUrl + "/" + image._sFile);
                    }
                    ind++;
                }
                titles.push(i._sName); 
                globalIndexText++;
                //trace(i._sName);
            } 
        });
        loader.load(new URLRequest(url));
    }

    function makeRequest(url, onComplete) { // Won't work I suppose, need loader to get data.
        var loader = new URLLoader();
        loader.addEventListener("complete", onComplete);
        loader.load(new URLRequest(url));
    }

    var bestOfToday = [];
    var bestOfTodayObjs = [];

    function getBestOf() {

        var versionTxt = new FlxText(10, 50);
        versionTxt.text = "Best of Today";
        versionTxt.setFormat(Paths.font('Tardling v1.1.ttf'));
        versionTxt.size = 30;
        versionTxt.antialiasing = true;
        add(versionTxt);

        var url = "https://gamebanana.com/apiv11/Game/8694/TopSubs";
        var loader = new URLLoader();
        loader.addEventListener("complete", ()->{
            var data = parseJsonString(loader.data);
            for (mod in data) {
                if (mod._sPeriod == "today") {
                    bestOfToday.push(mod);
                }
            }
            //trace(bestOfToday);
            addBestOfToday();
            // data = loader.data
        });
        loader.load(new URLRequest(url));
    }

    var bestIndex = 0;
    function addBestOfToday() {
        if (bestIndex > bestOfToday.length - 1) { 
            loadingCircle.visible = false;    
            return; 
        }
        var i = bestOfToday[bestIndex];
        loader = new URLLoader();
        loader.dataFormat = 0;
        loader.addEventListener("complete", ()->{
            var curBest = bestOfToday[bestIndex];
            var bitmap:BitmapData = BitmapData.fromBytes(loader.data);
            var sprite:FunkinSprite = new FunkinSprite().loadBitmapData(bitmap);

            var modTitle = new FlxText(0, 0, (FlxG.width/3)*2);
            modTitle.text = curBest._sName + "\n(" + curBest._aRootCategory._sName + ")";
            modTitle.setFormat(Paths.font('Tardling-Solid.ttf'));
            modTitle.size = 20*2;
            modTitle.scale.set(0.5, 0.5);
            modTitle.antialiasing = true;
            modTitle.borderColor = 0xFF000000;
            modTitle.borderSize = 5;
            modTitle.borderStyle = FlxTextBorderStyle.OUTLINE;
            modTitle.updateHitbox();
            
            //add(sprite);
            bestOfTodayObjs.push({
                // Strings \\
                id: curBest._idRow,
                type: curBest._sModelName,
                submitterID: curBest._aSubmitter._idRow,
                description: curBest._sDescription,
                likes: curBest._nLikeCount,
                category: curBest._aRootCategory._sName,
                // Objects \\
                title: modTitle,
                thumbnail: sprite
            });
            bestIndex++;
            addBestOfToday();
        });
        loader.load(new URLRequest(i._sImageUrl));
    }

    function makeRequest(url, onComplete) {
        var loader = new URLLoader();
        loader.addEventListener("complete", ()->{
            onComplete(loader);
        });
        loader.load(new URLRequest(url));
    }

    function create() {
        super.create();
		Cursor.show();

        roundCornerShader =  new ScriptedFlxRuntimeShader(Assets.getText(Paths.frag("RoundEdge")));
        roundCornerShader.data.iTime.value = 1000;
        //NListUtil = new Module("NListUtil");
        //trace(NListUtil);

        for (mod in PolymodHandler.getAllMods()) {
			var meta = parseJsonFile("mods/" + mod.id + "/_polymod_meta.json");
			if (meta.title == "Nova Mod Downloader") {
				currentFolder = "mods/" + mod.id;
				break;
			}
		}

        verifiedIDs = parseNListFile(currentFolder + "/data/verified-ids");

        var chartEditor = new ChartEditorState(); // To Fix UI Font.

        /*makeRequest("https://gamebanana.com/apiv11/Game/8694/Subfeed?_nPage=1&_csvModelInclusions=Mod", (event)->{
            trace(event.data);
        });*/
        /*makeRequest("https://github.com/NebulaStellaNova/Nova-Mod-Manager/blob/main/whittyFront.png?raw=true", (event)->{
            trace(event.data);
        });*/

        /* var loader = new URLLoader();
        loader.dataFormat = 0;
        loader.addEventListener("complete", ()->{
            //var bitmap:BitmapData = BitmapData.fromBytes(loader.data);
            //var sprite:FunkinSprite = new FunkinSprite(10, 10).loadBitmapData(bitmap);
            //add(sprite);
            //trace(loader.data);
            //FileUtil.writeBytesToPath(".temp/test.png", loader.data);
        });
        //var reference = new FileReference();
        var url = "https://github.com/NebulaStellaNova/Nova-Mod-Manager/blob/main/whittyFront.png?raw=true"; */
        //loader.load(new URLRequest(url));

        //loadMods();

        FlxG.camera.bgColor = 0xFF2B2C2E;

        // UI Stuff \\
        var topBar = new MenuBar();
		topBar.width = FlxG.width;
		//topBar.height = 50;
		add(topBar);

        var fileMenu = new Menu();
		fileMenu.text = "File";
        topBar.addComponent(fileMenu);

        var gamebananaLogo = new FunkinSprite().loadGraphic(Paths.image("ui/gamebanana"));
        gamebananaLogo.scale.set(0.8, 0.8);
        gamebananaLogo.updateHitbox();
        gamebananaLogo.screenCenter();
        gamebananaLogo.y = 6;
        gamebananaLogo.color = 0xFFFF00FF;
        add(gamebananaLogo);

        loadingCircle = new FunkinSprite().loadGraphic(Paths.image("ui/loadingCircle"));
        loadingCircle.scale.set(0.5, 0.5);
        loadingCircle.updateHitbox();
        loadingCircle.screenCenter();
        loadingCircle.y += 25;
        add(loadingCircle);

        getBestOf();

        FlxG.sound.music.stop();
    }

    function format(text) {
        text = StringTools.replace(text, "<br>", "\n");
        text = StringTools.replace(text, "&amp;", "&");
        text = StringTools.replace(text, " SelectedElement", "");
        text = StringTools.replace(text, "<span class=\"BlueColor\">", "<font color='#6CB1E1'>");
        text = StringTools.replace(text, "<span class=\"GreenDarkColor\">", "<font color='#344734'>");
        text = StringTools.replace(text, "<span class=\"GreenColor\">", "<font color='#6EE16C'>");
        text = StringTools.replace(text, "<span class=\"RedColor\">", "<font color='#FF4E4E'>");
        text = StringTools.replace(text, "</span>", "</font>");
        return text;
    }

    var windowManager = new WindowManager();

    var infoWindow;
    function openInfoWindow(data) {
        infoWindow = new Window();
        infoWindow.maximizable = false;
        infoWindow.minimizable = false;
        infoWindow.collapsable = false;
        infoWindow.draggable = true;
        infoWindow.windowManager = windowManager;
        infoWindow.width = 1000;
        infoWindow.height = 700;
        infoWindow.title = data.name;
        add(infoWindow);

        var subDesc = new Label();
        subDesc.text = format(data.description);//data.description;
        subDesc.width = 980;
        subDesc.fontSize = 10;
        infoWindow.addComponent(subDesc);

        var description = new Label();
        description.text = format(data.text);//data.description;
        description.width = 980;
        infoWindow.addComponent(description);
        
        infoWindow.screenCenter();

        openSound();
    }

    var cachedInfo = [
        "INIT" => "Nothing"
    ];
    var curViewingID;

    function moreInfo(id) {
        curViewingID = id;
        if (cachedInfo.exists()) {
            openInfoWindow(cachedInfo[id]);
        }
        var curSelection;
        for (i in bestOfTodayObjs) {
            if (i.id == id) {
                curSelection = i;
            }
        }
        loader = new URLLoader();
        loader.dataFormat = 0;
        loader.addEventListener("complete", ()->{
            var data = Json.parse(loader.data);
            cachedInfo.set(curViewingID, data);
            openInfoWindow(data);
            //trace(data);
        });
        var url = "https://api.gamebanana.com/Core/Item/Data?itemtype=" + curSelection.type + "&itemid=" + id + "&return_object=true&fields=";
        var fields = [
            "authors",
            "Category().name",
            "catid",
            "contestid",
            "creator",
            "Credits().aAuthors()",
            "Credits().aAuthorsAndGroups()",
            "Credits().ssvAuthorNames()",
            "date",
            "description",
            "downloads",
            "feedback_instructions",
            "Files().aFiles()",
            "Game().name",
            "install_instructions",
            "is_obsolete",
            "lastpost_date",
            "lastpost_userid",
            "likes",
            "mdate",
            "modnote",
            "name",
            "Nsfw().bIsNsfw()",
            "obsol_notice",
            "Owner().name",
            "postcount",
            "Posts().LastPost().idPosterRow()",
            "Posts().LastPost().sText()",
            "Posts().LastPost().tsDateAdded()",
            "Posts().Postcount().nPostCount()",
            "Preview().sStructuredDataFullsizeUrl()",
            "Preview().sSubFeedImageUrl()",
            "RootCategory().id",
            "RootCategory().name",
            "screenshots",
            "studioid",
            "text",
            "Trash().bIsTrashed()",
            "udate",
            "Updates().aGetLatestUpdates()",
            "Updates().aLatestUpdates()",
            "Updates().bSubmissionHasUpdates()",
            "Updates().nUpdatesCount()",
            "Url().sDownloadUrl()",
            "Url().sEditUrl()",
            "Url().sEmbeddablesUrl()",
            "Url().sHistoryUrl()",
            "Url().sProfileUrl()",
            "Url().sTrashUrl()",
            "Url().sUntrashUrl()",
            "Url().sUpdatesUrl()",
            "Url().sWithholdUrl()",
            "userid",
            "views",
            "Withhold().bIsWithheld()"
        ];
        url += fields.join(',');
        loader.load(new URLRequest(url));
    }

    function test(id) {
        trace(id);
    }

    function update(elapsed) {
        super.update(elapsed);
        /* var index = 0;
        for (sprite in loadedSprites) {
            sprite.setGraphicSize(FlxG.width/5, FlxG.height/5);
            sprite.x = (FlxG.width/5)*index; 
            index++;
        } */
        for (i in bestOfTodayObjs) {
            var index = bestOfTodayObjs.indexOf(i);
            var daSprite = i.thumbnail;
            var daTitle = i.title;
            var padding = 20;
            var daWidth = (FlxG.width/3)-padding;
            daSprite.setGraphicSize(daWidth, (FlxG.height/3)-padding);
            daSprite.updateHitbox();
            daSprite.x = (daWidth + 10) * index; 
            daSprite.x += 20;
            daSprite.y = 100;
            if (!members.contains(daSprite)) {
                add(daSprite);
            }
            daTitle.x = daSprite.x;
            daTitle.y = daSprite.y + daSprite.height + 5;
            if (!members.contains(daTitle)) {
                add(daTitle);
                var buttonBox = new HBox();
                buttonBox.x = daTitle.x;
                buttonBox.y = daTitle.y + (daTitle.frameHeight/2);

                var downloadButton = new Button();
                downloadButton.height = 25;
                downloadButton.text = "   Download";
                var downloadSprite = new FunkinSprite(12, 6).loadGraphic(Paths.image("ui/downloadIcon"));
                downloadSprite.setGraphicSize(12, 12);
                downloadSprite.updateHitbox();
                downloadButton.add(downloadSprite);
                downloadButton.onClick = ()->test(bestOfTodayObjs[index].id);
                buttonBox.addComponent(downloadButton);
                add(buttonBox);
                
                var infoButton = new Button();
                infoButton.text = "   More Info";
                infoButton.onClick = ()->moreInfo(bestOfTodayObjs[index].id);

                var infoSprite = new FunkinSprite(12, 6).loadGraphic(Paths.image("ui/info"));
                infoSprite.setGraphicSize(14, 14);
                infoSprite.updateHitbox();
                infoButton.add(infoSprite);

                buttonBox.addComponent(infoButton);
                add(buttonBox);

                if (StringTools.contains(verifiedIDs.toString(), i.id)) {
                    var verifiedButton = new Button();
                    verifiedButton.text = "   Verified";
                    verifiedButton.onClick = ()->{
                        var verifiedWindow = new Window();
                        verifiedWindow.maximizable = false;
                        verifiedWindow.minimizable = false;
                        verifiedWindow.collapsable = false;
                        verifiedWindow.draggable = true;
                        verifiedWindow.windowManager = windowManager;
                        verifiedWindow.title = "Verified!";
                        verifiedWindow.width = 200;
                        verifiedWindow.height = 100;
                        verifiedWindow.screenCenter();
                        
                        var label = new Label();
                        label.text = "Verified V-Slice Mod";
                        verifiedWindow.addComponent(label);
                        add(verifiedWindow);

                        openSound();
                    };
    
                    var verifiedSprite = new FunkinSprite(12, 6).loadGraphic(Paths.image("ui/verified"));
                    verifiedSprite.setGraphicSize(14, 14);
                    verifiedSprite.updateHitbox();
                    verifiedButton.add(verifiedSprite);
    
                    buttonBox.addComponent(verifiedButton);
                    add(buttonBox);
                }
            }
        }

        if (loadingCircle != null) {
            loadingCircle.angle += (10 * elapsed) * 100;
        }
    }

    function destroy() {
        super.destroy();
        Cursor.hide();
    }

    function parseNListFile(path) {
        var nListFile = FileUtil.readStringFromPath(path + ".nList");
        var finalLines = [];
        var lines = nListFile.split("\n");
        for (i in lines) {
            if (!StringTools.startsWith(i, "//")) {
                finalLines.push(i);
            }
        }
        return finalLines;
    }

}